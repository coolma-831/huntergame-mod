name: Build Minecraft Mod

on:
  workflow_dispatch:  # 允许手动触发
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build and Upload Mod
    
    steps:
    # 1. 检出代码
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    # 2. 设置 Java 环境
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    # 3. 设置 Forge 开发环境 (已修复插件仓库问题)
    - name: Setup Forge environment
      run: |
        # 创建完整的项目结构
        mkdir -p src/main/java/com/example/huntergame
        mkdir -p src/main/resources/META-INF
        mkdir -p gradle/wrapper
        
        # 创建 build.gradle (已添加仓库配置)
        cat > build.gradle << 'EOL'
        plugins {
            id 'net.minecraftforge.gradle' version '5.1.44'
        }
        
        version = '1.0'
        group = 'com.example.huntergame'
        archivesBaseName = 'huntergame'
        
        java.toolchain.languageVersion = JavaLanguageVersion.of(17)
        
        // 添加仓库配置
        repositories {
            maven {
                url "https://maven.minecraftforge.net"
            }
        }
        
        minecraft {
            mappings channel: 'official', version: '1.20.1'
            
            runs {
                client {
                    workingDirectory project.file('run')
                    property 'forge.logging.console.level', 'debug'
                    mods {
                        huntergame {
                            source sourceSets.main
                        }
                    }
                }
            }
        }
        
        dependencies {
            minecraft 'net.minecraftforge:forge:1.20.1-47.1.0'
        }
        
        jar {
            manifest {
                attributes([
                    "Specification-Title": "huntergame",
                    "Specification-Version": "1",
                    "Implementation-Title": project.name,
                    "Implementation-Version": "1.0",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
                ])
            }
        }
        
        processResources {
            from('src/main/resources') {
                include '**'
            }
        }
        EOL
        
        # 创建 settings.gradle (已添加插件仓库)
        cat > settings.gradle << 'EOL'
        pluginManagement {
            repositories {
                maven {
                    url = "https://maven.minecraftforge.net/"
                }
                gradlePluginPortal()
            }
        }
        rootProject.name = 'huntergame-mod'
        EOL
        
        # 创建 Gradle Wrapper 配置
        cat > gradle/wrapper/gradle-wrapper.properties << 'EOL'
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\://services.gradle.org/distributions/gradle-7.5.1-bin.zip
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        EOL
        
        # 创建必要的资源文件
        cat > src/main/resources/META-INF/mods.toml << 'EOL'
        modLoader="javafml"
        loaderVersion="[47,)"
        license="All Rights Reserved"
        [[mods]]
        modId="huntergame"
        version="1.0"
        displayName="猎人游戏"
        description="猎人追逐逃生者的游戏模式"
        authors="YourName"
        EOL
        
        cat > src/main/resources/META-INF/accesstransformer.cfg << 'EOL'
        # 空访问转换器文件
        EOL
        
        echo "Forge 开发环境设置完成"
    
    # 4. 初始化 Gradle Wrapper (简化版)
    - name: Initialize Gradle Wrapper
      run: |
        # 更简单的初始化方式
        wget -q https://github.com/gradle/gradle/raw/v7.5.1/gradle/wrapper/gradle-wrapper.jar -P gradle/wrapper/
        echo 'distributionUrl=https\://services.gradle.org/distributions/gradle-7.5.1-bin.zip' > gradle/wrapper/gradle-wrapper.properties
        chmod +x gradlew 2>/dev/null || true
        echo "Gradle Wrapper 初始化完成"
    
    # 5. 构建 Mod (添加重试机制)
    - name: Build Mod with Gradle
      run: |
        # 首次构建可能因网络问题失败，添加重试
        for i in {1..3}; do
            ./gradlew build --no-daemon --stacktrace --refresh-dependencies && break
            echo "构建失败，重试中 ($i/3)..."
            sleep 5
        done
    
    # 6. 上传构建产物
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: mod-artifact
        path: build/libs/*.jar
        retention-days: 5
    
    # 7. 添加调试信息 (增强版)
    - name: Debug file structure
      if: always()
      run: |
        echo "===== 当前目录结构 ====="
        find . -type d | sort
        echo "\n===== build.gradle 内容 ====="
        cat build.gradle
        echo "\n===== settings.gradle 内容 ====="
        cat settings.gradle
        echo "\n===== Gradle 版本信息 ====="
        ./gradlew --version || true
        echo "\n===== 依赖树 ====="
        ./gradlew dependencies --configuration compileClasspath || true
